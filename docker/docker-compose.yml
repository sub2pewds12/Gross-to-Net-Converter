services:
  db:
    image: postgres:15-alpine
    container_name: vn_postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres_password}
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
    healthcheck: # Added healthcheck for PostgreSQL
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres_user} -d ${POSTGRES_DB:-app_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # Give it some time to start up before first healthcheck
    restart: unless-stopped

  api:
    build:
      context: ..
      dockerfile: docker/api.dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ../core:/app/core
      - ../api:/app/api
    env_file:
      - ../.env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres_user}:${POSTGRES_PASSWORD:-postgres_password}@db:5432/${POSTGRES_DB:-app_db}
    depends_on:
      db: # Modified depends_on
        condition: service_healthy # Wait for the db service to be healthy
    restart: unless-stopped

  frontend:
    build:
      context: ..
      dockerfile: docker/frontend.dockerfile
    ports:
      - "8501:8501"
    volumes:
      - ../core:/app/core
      - ../frontend:/app/frontend
    env_file:
      - ../.env
    depends_on:
      api: # Frontend depends on API
        condition: service_started # Or service_healthy if API had a healthcheck
    restart: unless-stopped

volumes:
  postgres_data:


